# yamllint disable rule:line-length
---
name: Slack Notifications
on:
  workflow_call:
    inputs:
      slackChannel:
        type: string
        description: Name of the slack channel where the notifications are to be sent.
        default: build
        required: true
      environment:
        required: false
        description: Name of the GitHub Environment to use. Required if your repository uses GitHub Environments with a modified OIDC sub claim. Set to `slack` in this case.
        type: string
        default: ''

jobs:
 slack-notifications:
  runs-on: ubuntu-latest
  name: ${{ github.event.check_run.name }} Slack Notification
  environment: ${{ inputs.environment }}
  permissions:
    contents: read
    checks: read
    id-token: write  # to authenticate via OIDC
  if: >-
      contains(fromJSON('["cirrus-ci", "sonarqube-next", "sonarcloud", "azure-pipelines"]'), github.event.check_run.app.slug)
      && ( contains(fromJSON('["main", "master"]'), github.event.check_run.check_suite.head_branch) || startsWith(github.event.check_run.check_suite.head_branch, 'dogfood-') || startsWith(github.event.check_run.check_suite.head_branch, 'branch-') )
      && github.event.check_run.conclusion != 'success'
      && github.event.check_run.conclusion != 'cancelled'
      && github.event.check_run.conclusion != 'skipped'
      && github.event.check_run.conclusion != 'neutral'
      ||
      (github.event_name == 'check_suite' &&
      contains(fromJSON('["cirrus-ci", "sonarqube-next", "sonarcloud", "azure-pipelines"]'), github.event.check_suite.app.slug)
      && ( contains(fromJSON('["main", "master"]'), github.event.check_suite.head_branch) || startsWith(github.event.check_suite.head_branch, 'dogfood-') || startsWith(github.event.check_suite.head_branch, 'branch-') )
      && github.event.check_suite.conclusion != 'success'
      && github.event.check_suite.conclusion != 'cancelled'
      && github.event.check_suite.conclusion != 'skipped'
      && github.event.check_suite.conclusion != 'neutral')
  steps:
    - name: Vault Secrets
      id: secrets
      uses: SonarSource/vault-action-wrapper@d6d745ffdbc82b040df839b903bc33b5592cd6b0 # 3.0.2
      with:
        secrets: |
          development/kv/data/slack webhook | slack_webhook;
          development/kv/data/slack token | slack_token;

    - name: Get Slack User ID
      id: get-user-id
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
      with:
        script: |
          const actor = '${{ github.actor }}';
          const regex = /(\w+)-(\w+)-(\w+)/;
          const matches = actor.match(regex);
          if (matches) {
            const email = `${matches[1]}.${matches[2]}@sonarsource.com`;
            const token = '${{ fromJSON(steps.secrets.outputs.vault).slack_token }}';
            const response = await fetch('https://slack.com/api/users.list', {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            });
            const data = await response.json();
            if (data.ok) {
              const user = data.members.find(member => member.profile.email === email);
              if (user) {
                core.exportVariable('user_id', user.id);
              } else {
                core.exportVariable('user_id', '');
              }
            } else {
              core.exportVariable('user_id', '');
            }
          } else {
            core.exportVariable('user_id', '');
          }

    - name: Set Slack Notification Variables
      id: set-slack-vars
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ github.event_name }}" == "check_run" ]; then
          echo "event_type=check_run" >> $GITHUB_ENV
          echo "app_name=${{ github.event.check_run.app.name }}" >> $GITHUB_ENV
          echo "details_url=${{ github.event.check_run.details_url }}" >> $GITHUB_ENV
          echo "run_name=${{ github.event.check_run.name }}" >> $GITHUB_ENV
          echo "conclusion=${{ github.event.check_run.conclusion }}" >> $GITHUB_ENV
          echo "head_branch=${{ github.event.check_run.check_suite.head_branch }}" >> $GITHUB_ENV
          echo "head_sha=${{ github.event.check_run.head_sha }}" >> $GITHUB_ENV
          echo "avatar_url=${{ github.event.check_run.app.owner.avatar_url }}" >> $GITHUB_ENV
          echo "check_suite_id=${{ github.event.check_run.check_suite.id }}" >> $GITHUB_ENV
        else
          echo "Retrieving failed check runs for check suite ID: ${{ github.event.check_suite.id }}"
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/check-suites/${{ github.event.check_suite.id }}/check-runs \
            | jq '.check_runs[] | select(.conclusion == "failure")' > failed_check_runs.json
          cat failed_check_runs.json

          echo "Extract fields for check-run: $(jq -r '.name' failed_check_runs.json | head -n 1)"

          # Extract fields from the failed check run and set environment variables
          app_name=$(jq -r '.app.name' failed_check_runs.json | head -n 1)
          details_url=$(jq -r '.details_url' failed_check_runs.json | head -n 1)
          run_name=$(jq -r '.name' failed_check_runs.json | head -n 1)
          conclusion=$(jq -r '.conclusion' failed_check_runs.json | head -n 1)
          head_sha=$(jq -r '.head_sha' failed_check_runs.json | head -n 1)
          avatar_url=$(jq -r '.app.owner.avatar_url' failed_check_runs.json | head -n 1)
          check_suite_id=$(jq -r '.check_suite.id' failed_check_runs.json | head -n 1)

          echo "app_name=$app_name" >> $GITHUB_ENV
          echo "details_url=$details_url" >> $GITHUB_ENV
          echo "run_name=$run_name" >> $GITHUB_ENV
          echo "conclusion=$conclusion" >> $GITHUB_ENV
          echo "head_branch=${{ github.event.check_suite.head_branch }}" >> $GITHUB_ENV
          echo "head_sha=$head_sha" >> $GITHUB_ENV
          echo "avatar_url=$avatar_url" >> $GITHUB_ENV
          echo "check_suite_id=$check_suite_id" >> $GITHUB_ENV
        fi

    - name: Debug Slack Payload
      run: |
        echo "Payload:"
        echo "check_suite_id: ${{ env.check_suite_id }}"
        echo "{
          \"channel\":\"${{ inputs.slackChannel }}\",
          \"attachments\":[
              {
                \"color\":\"#ee0000\",
                \"blocks\":[
                    {
                      \"type\":\"section\",
                      \"text\":{
                          \"type\":\"mrkdwn\",
                          \"text\":\"*${{ env.app_name }}* - <${{ env.details_url }}|${{ env.run_name }}> ${{ env.conclusion }}  in *${{ github.repository }}*\"
                      }
                    },
                    {
                      \"type\":\"section\",
                      \"text\":{
                          \"type\":\"mrkdwn\",
                          \"text\":\"Branch: *${{ env.head_branch }}*\nCommit: *${{ env.head_sha }}*\nActor: <@${{ env.user_id }}>\"
                      }
                    },
                    {
                      \"type\": \"context\",
                      \"elements\": [
                          {
                            \"type\": \"image\",
                            \"image_url\": \"${{ env.avatar_url }}\",
                            \"alt_text\": \"Icon\"
                          },
                          {
                            \"type\": \"mrkdwn\",
                            \"text\": \"<${{ env.details_url }}|View more details>\"
                          }
                      ]
                    }
                ]
              }
          ]
        }"

    - name: Send Slack notification
      uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
      env:
        SLACK_WEBHOOK_URL: ${{ fromJSON(steps.secrets.outputs.vault).slack_webhook }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      with:
        payload: |
          {
            "channel":"${{ inputs.slackChannel }}",
            "attachments":[
                {
                  "color":"#ee0000",
                  "blocks":[
                      {
                        "type":"section",
                        "text":{
                            "type":"mrkdwn",
                            "text":"*${{ env.app_name }}* - <${{ env.details_url }}|${{ env.run_name }}> ${{ env.conclusion }}  in *${{ github.repository }}*"
                        }
                      },
                      {
                        "type":"section",
                        "text":{
                            "type":"mrkdwn",
                            "text":"Branch: *${{ env.head_branch }}*\nCommit: *${{ env.head_sha }}*\nActor: <@${{ env.user_id }}>"
                        }
                      },
                      {
                        "type": "context",
                        "elements": [
                            {
                              "type": "image",
                              "image_url": "${{ env.avatar_url }}",
                              "alt_text": "Icon"
                            },
                            {
                              "type": "mrkdwn",
                              "text": "<${{ env.details_url }}|View more details>"
                            }
                        ]
                      }
                  ]
                }
            ]
          }
